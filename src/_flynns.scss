// @TODO CHANGES
// D: align spacers
// D: move special show to flag
// F: copy gradient from C
// All: shrink status flags over picture (line height 1)
// All: shrink distance between stars

// Screen Sizes
// These were stolen from bootstrap.
// Redefined here so they can be overridden as necessary.
// Added XL and 2X.
$screen-xs: 480px !default;
$screen-sm: 768px !default;
$screen-md: 992px !default;
$screen-lg: 1200px !default;
$screen-xl: 1550px !default;
$screen-2x: 1900px !default;


// Some of the arcades will check for a variable called $page-gradient.
// The default here is to make sure that `@if` doesn't fail for a variable
// not existing.
$page-gradient: false !default;

// This is a basic breakdown of how the grid looks.  The number of elements
// per row, and the gutters between them can be customized.

/*--------------------------------------------------------------------------+
|                                                                           |
| section.flynns                                                            |
|                                                                           |
| +-----------------------------------------------------------------------+ |
| |                                                                       | |
| | ul.the-grid                                                           | |
| |                                                                       | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| | |                    |  |                    | |                    | | |
| | | li.arcade          |  | li.arcade          | | li.arcade          | | |
| | |                    |  |                    | |                    | | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| |                                                                       | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| | |                    |  |                    | |                    | | |
| | | li.arcade          |  | li.arcade          | | li.arcade          | | |
| | |                    |  |                    | |                    | | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| |                                                                       | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| | |                    |  |                    | |                    | | |
| | | li.arcade          |  | li.arcade          | | li.arcade          | | |
| | |                    |  |                    | |                    | | |
| | +--------------------+  +--------------------+ +--------------------+ | |
| +-----------------------------------------------------------------------+ |
+--------------------------------------------------------------------------*/

// Are you trying to debug the arcade?
$flynns-debug: $DEBUG !default;

// Gutter Options: none, small, medium, large
$flynns-gutter-size: medium !default;

// Fine tuning the values.
$flynns-gutter-small: 2.5% !default;
$flynns-gutter-medium: 5% !default;
$flynns-gutter-large: 10% !default;

// Option for choosing the thumbnail display.
// * asteroids
// * battlezone
// * centipede
// * defender
// * excitebike
// * frogger
$flynns-arcade: asteroids !default;

// What font for the names
$flynns-font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !default;

// What color are the links (if other than white)?
$flynns-link-color: #09f !default;

// Status colors
$flynns-offline-bg: #222 !default;
$flynns-offline-color: white !default;

$flynns-online-bg: #3C0 !default;
$flynns-online-color: black !default;

$flynns-partychat-bg: #3C0 !default;
$flynns-partychat-color: black !default;

$flynns-goldshow-bg: gold !default;
$flynns-goldshow-color: black !default;

$flynns-special-bg: #09F !default;
$flynns-special-color: contrast-color($flynns-special-bg) !default;
$flynns-special-spacing: 3px;

// Thumbnail size.
// Options: medium, large
$flynns-thumbnail-size: medium !default;

// Should the images hover?
$flynns-image-hover: true !default;

// Show the headlines?
$flynns-hide-headline: false !default;

// Show the drop shadow?
$flynns-show-dropshadow: true !default;
$flynns-arcade-dropshadow: 0 1px 1px rgba(0, 0, 0, 0.75) !default;

// Grid Gutter size.
// Options: small, medium, large, none (anything else)
$flynns-grid-spacing: small !default;

// This takes in the number of total columns you want in per row.
@mixin flynns_pixel($columns) {
  // Fine tuning the values.
  // These values are used to create the total number of columns for the
  // block grids to span.  Too keep the gutters consistent as the page gets
  // smaller, I'm also multiplying this number by the number of columns.
  //
  // Small takes 5 columns, and multiplies it by 12 totaling 60. The gutters
  // are calculated in the neat framework using a golden ratio calculator.
  //
  // So the gap for "small" would assume that there are 60 total columns on
  // the page, but each block is as wide as 12 blocks, so there are still
  // only 5 columns.
  $flynns-grid-none: 1000;
  $flynns-grid-small: 12 !default;
  $flynns-grid-medium: 4 !default;
  $flynns-grid-large: 2 !default;

  // Default to no gutter, upgrade if necessary.
  $grid-value: $flynns-grid-none;

  // Again with the needing a switch statement.
  @if $flynns-grid-spacing == small {
    $grid-value: $flynns-grid-small;
  } @else if $flynns-grid-spacing == medium {
    $grid-value: $flynns-grid-medium;
  } @else if $flynns-grid-spacing == large {
    $grid-value: $flynns-grid-large;
  }

  // See above for why $total.
  $total: $columns * $grid-value;

  // Set the max-width for the whole container to 320*$cols just in case.
  max-width: 320px * $columns;

  // Automatic Rows
  // http://neat.bourbon.io/examples/
  & > .arcade {
    @include span-columns(($total / $columns) of $total);
    @include omega(#{$columns}n);

    // Flex gutter is a neat mixin that calculates the golden-ratio
    // 'per column' for the total number of columns.
    @if $flynns-grid-spacing == none {
      margin-bottom: flex-gutter($flynns-grid-small * $columns);
    } @else {
      margin-bottom: flex-gutter($total);
    }

    &:nth-child(#{$columns}n + 1) {
      clear: both;
    }
  }

  // This div is used by javascript to tell it the total number of columns
  // on the page at any given time.  This way we don't have to do any silly
  // calculating, or have our CSS breakpoints hard-coded into the javascript
  // somewhere else.
  & + .grid--admin {
    z-index: $columns;
  }
}

@mixin flynns_arrow($width, $height, $color) {
  content: '';
  position: absolute;
  top: 100%;
  left: 50%;
  @include triangle($width $height, $color, down);
  margin-left: -($width / 2);
}

// There are always exceptions to the rules. For some of the designs we have
// content in a white box. This mixin checks the background;
// If:
//    A: the background is white.
//    B: there is no gradient.
//    C: the grid spacing is not "none"
// Then:
//    No padding.
//
@mixin flynns_background_check() {
  @if rgba($body-bg, 1) == rgba(white, 1) {
    @if $page-gradient == false {
      @if $flynns-grid-spacing != none {
        @content;
      }
    }
  }
}

// Sass could really use a switch statement...
// {small: $small, medium: $med..., youget: $thepicture}
$flynns-gutter-value: 0;
@if $flynns-gutter-size == small {
  $flynns-gutter-value: $flynns-gutter-small;
} @else if $flynns-gutter-size == medium {
  $flynns-gutter-value: $flynns-gutter-medium;
} @else if $flynns-gutter-size == large {
  $flynns-gutter-value: $flynns-gutter-large;
}

// The parent container. No position definitions are allowed between this
// class, and the player frame so that we can use position: absolute to
// get the player to the edges of the screen, with out any unnecessary
// calculating.
//
// .flynns > ul.the-grid > li.arcade > .arcade__player
.flynns {
  position: relative;

  @media (min-width: $screen-md) {
    padding: 0 ($flynns-gutter-value / 2);
  }

  @media (min-width: $screen-lg) {
    padding: 0 $flynns-gutter-value;
  }
}

// The z-index here is set so that javascript can ask for the number of
// results per row, with out having to count, or have the breakpoints
// hard-coded somewhere else.
.the-grid {
  //
  // Do not use the "position" property on me.
  // See .flynns
  //

  $size: $flynns-thumbnail-size;

  @include outer-container;
  max-width: 100%;
  margin: 0 auto;
  padding: 0;

  // iPhone portrait
  @media (max-width: $screen-xs - 1) {
    @include flynns_pixel(2);
  }

  // iPhone landscape -> iPad Portrait
  @media (min-width: $screen-xs) and (max-width: $screen-md - 1) {
    @if $size == large  { @include flynns_pixel(2); }
    @else { @include flynns_pixel(3); }
  }

  // iPad landscape -> Small desktop
  @media (min-width: $screen-md) and (max-width: $screen-lg - 1 ) {
    @if $size == large  { @include flynns_pixel(3); }
    @if $size == medium { @include flynns_pixel(4); }
    // @if $size == small  { @include flynns_pixel(5); }
  }

  // Small desktops
  @media (min-width: $screen-lg) and (max-width: $screen-xl - 1) {
    @if $size == large  { @include flynns_pixel(4); }
    @if $size == medium { @include flynns_pixel(5); }
    // @if $size == small  { @include flynns_pixel(6); }
  }

  @media (min-width: $screen-xl) and (max-width: $screen-2x - 1) {
    @if $size == large  { @include flynns_pixel(5); }
    @if $size == medium { @include flynns_pixel(6); }
    // @if $size == small  { @include flynns_pixel(7); }
  }

  @media (min-width: $screen-2x) {
    @if $size == large  { @include flynns_pixel(6); }
    @if $size == medium { @include flynns_pixel(7); }
    // @if $size == small  { @include flynns_pixel(8); }
  }

  + .grid--admin {
    position: absolute;
    display: none;
    content: "#{$flynns-arcade}";
  }
}

.mini-grid {
  @include outer-container;
  max-width: 100%;
  margin: 0 auto;
  padding: 0;

  // 2x - Always
  &.two {
    @include flynns_pixel(2);
  }

  // 3x -> 2x
  &.three {

    // iPhone portrait
    @media (max-width: $screen-xs - 1) {
      @include flynns_pixel(2);
    }

    // iPhone landscape
    @media (min-width: $screen-xs) {
      @include flynns_pixel(3);
    }
  }

  // 4x -> 3x -> 2x
  &.four {

    // iPhone portrait
    @media (max-width: $screen-xs - 1) {
      @include flynns_pixel(2);
    }

    // iPhone landscape
    @media (min-width: $screen-xs) and (max-width: $screen-md - 1) {
      @include flynns_pixel(3);
    }

    // iPad Portrait
    @media (min-width: $screen-md) {
      @include flynns_pixel(4);
    }
  }
}

@import "arcades";
