//
// Copyright (c) 2015 Accretive Technology Group, Inc.
//
// @author Daryl Roberts
//

//
// Do not use the "position" property on me.
// See .flynns
//

@mixin basic-grid {
  @include clearfix;
  margin: 0 (-$flynns-cell-padding);
  padding: 0;
  list-style: none;

  & > li {
    float: left;
    padding-left: $flynns-cell-padding;
    padding-right: $flynns-cell-padding;
    margin-bottom: ($flynns-cell-padding * 4);
    width: percentage((1 / 2));
  }
}

// build a media query, and set the width of each thumb.
@mixin grid-cols($cols, $width: false) {
  @if $width == false {
    $width: $cols * $flynns-thumbnail-small;
  }

  @media (min-width: $width) {
    width: percentage((1 / $cols));
  }
}


.the-grid {
  @include basic-grid;

  & > li {

    // @media (min-width: $screen-xs-min) {
    //   width: percentage((1 / 3));
    // }

    // @media (min-width: $screen-sm-min) {
    //   width: percentage((1 / 4));
    // }

    // Calculate the multiplier for the space used up by the gutters.
    $multiplier: 100% / (100 - ($flynns-gutter-value * 2));

    $offset: 0;

    @if $flynns-external-offset {

      // Shrink everything a bit more if we're using the catbus too.
      $offset: $flynns-external-nav-offset;
    }

    // Loop through the sizes.
    @each $size in
      $flynns-thumbnail-small,
      $flynns-thumbnail-medium,
      $flynns-thumbnail-large {

      $size_name: small;

      @if $size == $flynns-thumbnail-medium {
        $size_name: medium;
      } @else if $size == $flynns-thumbnail-large {
        $size_name: large;
      }

      .grid--#{$size_name} & {

        // Start with 3 columns, and go up from there.
        $cols: 3;
        @while $cols < 15 {

          // If we're less than 5 across, we want all small, all the time.
          $size-calc: $size;

          @if $cols < 5 {
            $size-calc: $flynns-thumbnail-small;
          }

          // Base calculation.  Columns * Thumbnail width.
          $start: $size-calc * $cols;

          // Multiplier for gutters at larger resolutions.
          $multiplier: 100% / (100 - $flynns-gutter-value);

          @if $start > $screen-lg-min {
            $multiplier: 100% / (100 - ($flynns-gutter-value * 2));
          }


          // Start here for all sizes.  Make it larger if necessary.
          $width: $start;

          // Add in the gutter multiplier.
          @if $start > $screen-sm-min {
            $width: floor($start * $multiplier);
          }

          // Add in the offset to support the catbus.
          @if $start > $screen-md-min {
            $width: floor(($start + ($offset / 2)) * $multiplier);
          }

          // We have some variables that we need for the `larger-grids`
          // mixin.

          @if $cols == 5 {
            @if $size_name == small {
              $flynns-small-grid-start: $width;
            } @else if $size_name == medium {
              $flynns-medium-grid-start: $width;
            } @else if $size_name == large {
              $flynns-large-grid-start: $width;
            }
          }

          // Just a reminder that we are operating on the <li> tag.
          @include grid-cols($cols, $width);


          @if $flynns-debug {

            .size--overview & {
              display: none;

              &:nth-of-type(-n+#{$cols}) {
                @media (min-width: $width) {
                  display: block;

                }
              }
            }
          }


          // NEXT!
          $cols: $cols + 1;

        } // @while $cols

      }
    } // @each $size

  }
} // .the-grid

.mini-grid {
  @include basic-grid;

  &.three > li {
    @include grid-cols(3);
  }

  &.four > li {
    @include grid-cols(4);
  }
}

// In the mobile first world, I want a few things to apply to
// mobile / small grids first, then only apply to the larger grid
// sizes when appropriate
//
// Defaults to both "larger" (than small) grids, but you can
// exclude if you need to.
@mixin larger-grids($medium: true, $large: true) {

  @if $medium {
    .grid--medium &,
    .grid--large & {
      @media (min-width: $flynns-medium-grid-start) {
        @content;
      }
    }
  }

  @if $large {
     .grid--large & {
      @media (min-width: $flynns-large-grid-start) {
        @content;
      }
    }
  }
}
